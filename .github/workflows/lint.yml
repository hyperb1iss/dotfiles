name: ⚡ Lint & Format

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  lint-and-format:
    name: ✨ Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: ⬇ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false # Don't need submodules for linting

      - name: ⚙ Set up tool cache
        uses: actions/cache@v4
        id: tool-cache
        with:
          path: |
            ~/.local/bin
            ~/.cargo/bin
            ~/go/bin
          key: ${{ runner.os }}-lint-tools-${{ hashFiles('.github/workflows/lint.yml') }}
          restore-keys: |
            ${{ runner.os }}-lint-tools-

      - name: ◆ Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          cache: "pip"

      - name: ◆ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: ◆ Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: ⚡ Install linting and formatting tools
        run: |
          set -euo pipefail

          # Create local bin directory
          mkdir -p ~/.local/bin
          export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$PATH"

          # Install system packages
          sudo apt-get update
          sudo apt-get install -y jq zsh

          # Function to install latest GitHub release
          install_github_release() {
            local repo=$1
            local pattern=$2
            local output=$3
            local latest_url

            latest_url=$(curl -s "https://api.github.com/repos/${repo}/releases/latest" |
              jq -r ".assets[] | select(.name | test(\"${pattern}\")) | .browser_download_url")

            if [[ -n "$latest_url" ]]; then
              echo "Installing ${output} from ${latest_url}"
              curl -sSL "$latest_url" -o "${output}.tmp"

              # Handle different archive types
              if [[ "$latest_url" == *.tar.xz ]]; then
                tar -xf "${output}.tmp" --strip-components=1 -C ~/.local/bin
                rm "${output}.tmp"
              else
                mv "${output}.tmp" "$output"
                chmod +x "$output"
              fi
            fi
          }

          # Install shellcheck (latest)
          if ! command -v shellcheck &> /dev/null; then
            install_github_release "koalaman/shellcheck" "linux.x86_64.tar.xz" "~/.local/bin/shellcheck"
          fi

          # Install shfmt (latest)
          if ! command -v shfmt &> /dev/null; then
            install_github_release "mvdan/sh" "linux_amd64" "~/.local/bin/shfmt"
          fi

          # Install Python tools
          pip install --user yamllint beautysh

          # Install Node tools globally
          npm install -g markdownlint-cli

          # Install Rust tools (with caching)
          if ! command -v selene &> /dev/null; then
            cargo install selene
          fi

          if ! command -v stylua &> /dev/null; then
            cargo install stylua
          fi

          # Add paths to GitHub PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: ✓ Run all linters
        run: make lint

      - name: ✓ Check formatting
        run: |
          make format

          if [ -n "$(git status --porcelain)" ]; then
            echo "::error::Formatting issues found! Run 'make format' locally to fix."
            echo "Files with formatting issues:"
            git status --porcelain
            echo ""
            echo "Diff:"
            git diff
            exit 1
          fi

          echo "✅ All files are properly formatted and linted!"
