export USE_CCACHE=1

alias gc='git cherry-pick'
alias cm='cd /home/shade/dev/laos/14'
alias gerrit='ssh -p 29418 cyanogen@r.cyanogenmod.org gerrit'

function apull() {
    for ARG in $@; do
        for FILE in "$(adb shell ls $ARG)"; do
            echo $FILE
            adb pull "$FILE"
        done
    done
}

function apush() {
    if [ -z "$OUT" ]; then
        echo "Android environment not configured."
        return 0;
    fi
    for i in $@; do
        REALFILE=`readlink -e $i`
        REALOUT=`readlink -e $OUT`
        OUTDIR=`dirname $REALFILE | sed -e "s#$REALOUT##g"`
        if [ -z "$OUTDIR" ]; then
            echo "Unable to resolve destination, are you in \$OUT?"
            return 0;
        fi
        FILE=`basename $REALFILE`
        echo "$i -> $OUTDIR/$FILE"
        adb push $REALFILE $OUTDIR/$FILE
    done
}

export apush

adbd () {
    adb -s $(get_device) "$@"
}

function get_device() {
    local devices=$(adb devices | grep device$)
    if [ $(wc -l <<< "$devices") -eq 1 ]; then
        awk {'print $1'} <<< "$devices"
    else
        IFS=$'\n' devices=($devices)
        unset IFS
        local device
        PS3="Select a device # "
        select device in "${devices[@]}"; do
            if [ -n "$device" ]; then
                awk {'print $1'} <<< "$device"
            fi
            break
        done
    fi
}

function logcat(){
    local device
    device=$(get_device)
    if [ -z "$1" ]
    then
        adb -s $device logcat -C
    else
            local filters=""
            for f in $@
            do
            export filters="$filters $f:*"
            done
            echo "filters $filters"
        adb -s $device logcat $filters *:S
     fi
}

function rmd() {
    pandoc $1 | lynx -stdin
}

#export SDCLANG=true
#export SDCLANG_PATH=/home/shade/dev/sd/toolchains/llvm-Snapdragon_LLVM_for_Android_3.8/prebuilt/linux-x86_64/bin
#export SDCLANG_LTO_DEFS=device/qcom/common/sdllvm-lto-defs.mk
#export WITH_GMS=true

export QT_SCALE_FACTOR=2

export PATH=$PATH:~/Android/Sdk/platform-tools

function mk_timer()
{
    local start_time=$(date +"%s")
    $@
    local ret=$?
    local end_time=$(date +"%s")
    local tdiff=$(($end_time-$start_time))
    local hours=$(($tdiff / 3600 ))
    local mins=$((($tdiff % 3600) / 60))
    local secs=$(($tdiff % 60))
    local ncolors=$(tput colors 2>/dev/null)
    if [ -n "$ncolors" ] && [ $ncolors -ge 8 ]; then
        color_failed=$'\E'"[0;31m"
        color_success=$'\E'"[0;32m"
        color_reset=$'\E'"[00m"
    else
        color_failed=""
        color_success=""
        color_reset=""
    fi
    echo
    if [ $ret -eq 0 ] ; then
        echo -n "${color_success}#### make completed successfully "
    else
        echo -n "${color_failed}#### make failed to build some targets "
    fi
    if [ $hours -gt 0 ] ; then
        printf "(%02g:%02g:%02g (hh:mm:ss))" $hours $mins $secs
    elif [ $mins -gt 0 ] ; then
        printf "(%02g:%02g (mm:ss))" $mins $secs
    elif [ $secs -gt 0 ] ; then
        printf "(%s seconds)" $secs
    fi
    echo " ####${color_reset}"
    echo
    return $ret
}

function mka() {
    mk_timer schedtool -B -n 10 -e ionice -n 7 make -j$(grep "^processor" /proc/cpuinfo | wc -l) "$@"
}

function aospremote()
{
    if ! git rev-parse --git-dir &> /dev/null
    then
        echo ".git directory not found. Please run this from the root directory of the Android repository you wish to set up."
        return 1
    fi
    git remote rm aosp 2> /dev/null
    PROJECT=$(pwd -P | sed -e "s#$ANDROID_BUILD_TOP\/##; s#-caf.*##; s#\/default##")
    if (echo $PROJECT | grep -qv "^device")
    then
        PFX="platform/"
    fi
    git remote add aosp https://android.googlesource.com/$PFX$PROJECT
    echo "Remote 'aosp' created"
}

function cafremote()
{
    if ! git rev-parse --git-dir &> /dev/null
    then
        echo ".git directory not found. Please run this from the root directory of the Android repository you wish to set up."
        return 1
    fi
    git remote rm caf 2> /dev/null
    PROJECT=$(pwd -P | sed -e "s#$ANDROID_BUILD_TOP\/##; s#-caf.*##; s#\/default##")
    if (echo $PROJECT | grep -qv "^device")
    then
        PFX="platform/"
    fi
    git remote add caf https://source.codeaurora.org/quic/la/$PFX$PROJECT
    echo "Remote 'caf' created"
}

function adbdev()
{
    adb wait-for-device && adb root && adb wait-for-device && adb remount
}

function installboot()
{
    if [ -z "$TARGET_PRODUCT" ];
    then
        echo "No TARGET_PRODUCT specified."
        return 1
    fi
    if [ ! -e "$OUT/boot.img" ];
    then
        echo "No boot.img found. Run make bootimage first."
        return 1
    fi
    PARTITION="/dev/block/bootdevice/by-name/boot"
    adb start-server && adb wait-for-device && adb root
    sleep 1
    adb wait-for-device shell mount /system 2>&1 > /dev/null
    adb wait-for-device remount
    if (adb shell getprop ro.product.name | grep -q "$TARGET_PRODUCT");
    then
        adb push $OUT/boot.img /data/local/tmp/
        for i in $OUT/system/lib/modules/*;
        do
            adb push $i /system/lib/modules/
        done
        adb shell dd if=/data/local/tmp/boot.img of=$PARTITION
        adb shell chmod 644 /system/lib/modules/*
        echo "Installation complete."
    else
        echo "The connected device does not appear to be $TARGET_PRODUCT, run away!"
    fi
}

export GOPATH=~/dev/go
export GO15VENDOREXPERIMENT=1

export PATH=$PATH:$GOPATH/bin

export SDCLANG_PATH=~/dev/sdllvm
export SDCLANG=1
