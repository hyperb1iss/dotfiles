#!/usr/bin/env bash
#
# shellint - Shell script linter and formatter
# A powerful tool for checking and fixing shell scripts in your dotfiles
#
# Handles:
# 1. Linting with shellcheck
# 2. Formatting with shfmt
# 3. Auto-fixing shellcheck issues
#

set -eo pipefail

# ANSI color codes for beautiful output 💅
RESET="\033[0m"
BOLD="\033[1m"
RED="\033[38;5;205m"     # Bright pink for errors
ORANGE="\033[38;5;209m"  # Soft neon orange for warnings
MAGENTA="\033[38;5;213m" # Bright magenta for info
PURPLE="\033[38;5;171m"  # Bright purple for debug
BLUE="\033[38;5;147m"    # Soft lavender for verbose
CYAN="\033[38;5;159m"    # Pastel cyan for success
PINK="\033[38;5;219m"    # Bright pink for highlights
YELLOW="\033[38;5;222m"  # Pastel amber for caution
GREEN="\033[38;5;157m"   # Pastel mint green for positive outcomes

# Color utility functions - short and sweet 💅
err() { echo -e "${RED}${BOLD}⨯ error:${RESET} $*"; }
warn() { echo -e "${ORANGE}⏣ $*${RESET}"; }
info() { echo -e "${MAGENTA}⏹ $*${RESET}"; }
dbg() { echo -e "${PURPLE}⏩ $*${RESET}"; }
verb() { echo -e "${BLUE}» $*${RESET}"; }
ok() { echo -e "${CYAN}➤ $*${RESET}"; }
hi() { echo -e "${PINK}⏺ $*${RESET}"; }
note() { echo -e "${YELLOW}⏧ $*${RESET}"; }
b() { echo -e "${BOLD}$*${RESET}"; }

# Action messages with consistent formatting
checking() { info "checking ${BOLD}$*${RESET}..."; }
fixing() { hi "fixing ${BOLD}$*${RESET}..."; }
formatting() { info "formatting ${BOLD}$*${RESET}..."; }

# Result patterns - update for lowercase
no_issues() { ok "${GREEN}no issues in $*${RESET}"; }
fixed() { ok "${GREEN}fixed issues in $*${RESET}"; }
well_formatted() { ok "${GREEN}$* already properly formatted${RESET}"; }
no_fixable() { note "no auto-fixable issues in $*"; }
nothing_to_fix() { ok "${GREEN}no issues to fix in $*${RESET}"; }

# Dependency check
check_deps() {
  local missing=0
  for cmd in shellcheck shfmt patch; do
    if ! command -v "${cmd}" &> /dev/null; then
      err "${cmd} not found in system path"
      missing=1
    fi
  done

  if [[ ${missing} -eq 1 ]]; then
    echo
    note "missing dependencies:"
    echo -e "  ${CYAN}» shellcheck:${RESET} https://github.com/koalaman/shellcheck#installing"
    echo -e "  ${CYAN}» shfmt:${RESET} https://github.com/mvdan/sh#shfmt"
    echo -e "  ${CYAN}» patch:${RESET} available in most package managers (apt, brew, etc.)"
    exit 1
  fi
}

# Print usage information
usage() {
  echo -e "${BOLD}${PURPLE}shellint${RESET} - shell script linter and formatter ${PINK}⏩${RESET}\n"
  echo -e "${BOLD}usage:${RESET}"
  echo -e "  shellint [options] [file(s)/directory]\n"
  echo -e "${BOLD}options:${RESET}"
  echo -e "  ${CYAN}-c, --check${RESET}         check files without modifying them"
  echo -e "  ${CYAN}-f, --fix${RESET}           auto-fix shellcheck issues when possible"
  echo -e "  ${CYAN}-F, --format${RESET}        format files with shfmt"
  echo -e "  ${CYAN}-a, --all${RESET}           run all checks and fixes (format + fix)"
  echo -e "  ${CYAN}-r, --recursive${RESET}     recursively process directories"
  echo -e "  ${CYAN}-q, --quiet${RESET}         minimal output"
  echo -e "  ${CYAN}-v, --verbose${RESET}       verbose output"
  echo -e "  ${CYAN}-e, --exclude=LIST${RESET}  exclude shellcheck codes (comma-separated)"
  echo -e "  ${CYAN}-s, --submodules${RESET}    include git submodules (excluded by default)"
  echo -e "  ${CYAN}-h, --help${RESET}          display this help message\n"
  echo -e "${BOLD}examples:${RESET}"
  echo -e "  ${BLUE}»${RESET} shellint --check sh/           ${MAGENTA}#${RESET} check all .sh files in sh/ directory"
  echo -e "  ${BLUE}»${RESET} shellint --fix sh/android.sh   ${MAGENTA}#${RESET} fix shellcheck issues in android.sh"
  echo -e "  ${BLUE}»${RESET} shellint --format --recursive  ${MAGENTA}#${RESET} format all shell files recursively"
  echo -e "  ${BLUE}»${RESET} shellint --all sh/             ${MAGENTA}#${RESET} format and fix all scripts in sh/"
  echo -e "  ${BLUE}»${RESET} shellint -e SC2086,SC2046 --fix ${MAGENTA}#${RESET} fix issues excluding certain codes\n"
}

# Check if path is in a git submodule
is_in_submodule() {
  local path="$1"

  # Skip check if we're not in a git repo
  if ! git rev-parse --is-inside-work-tree &> /dev/null; then
    return 1
  fi

  # Get the list of submodules
  local submodules
  submodules=$(git config --file .gitmodules --get-regexp path 2> /dev/null | awk '{print $2}' || echo "")

  if [[ -z "${submodules}" ]]; then
    return 1
  fi

  # Check if path is in any submodule
  while IFS= read -r submodule; do
    if [[ -n "${submodule}" && "${path}" == "${submodule}"* ]]; then
      return 0
    fi
  done <<< "${submodules}"

  return 1
}

# Find shell scripts in a directory
find_scripts() {
  local dir="$1"
  local recursive="$2"
  local include_submodules="$3"

  # Use printf to ensure one item per line, avoid issues with different find implementations
  if [[ "${recursive}" -eq 1 ]]; then
    # Try to use git ls-files for better handling of submodules if we're in a git repo
    if git rev-parse --is-inside-work-tree &> /dev/null; then
      if [[ "${include_submodules}" -eq 1 ]]; then
        # Find all files, let process_file filter
        git ls-files --recurse-submodules -- "${dir}"
      else
        # Find all files, let process_file filter
        git ls-files -- "${dir}"
      fi
    else
      # Find all files, let process_file filter
      find "${dir}" -type f -not -path "*/\\.*" -print 2> /dev/null || true
    fi
  else
    # Find all files, let process_file filter
    find "${dir}" -maxdepth 1 -type f -not -path "*/\\.*" -print 2> /dev/null || true
  fi
}

# Check if file is a shell script based on content (for files without extensions)
is_shell_script() {
  local file="$1"

  # Use file command to identify shell scripts more accurately
  local file_type
  file_type=$(file -b "${file}")

  # Check if file type contains shell script indicators
  if [[ "${file_type}" =~ (shell script|sh script|bash script|zsh script|Bourne-Again shell|POSIX shell) ]]; then
    return 0
  fi

  return 1
}

# Get shellcheck configuration
get_shellcheck_config() {
  local project_root
  project_root=$(git rev-parse --show-toplevel 2> /dev/null || pwd)

  local config_file="${project_root}/.shellcheckrc"
  local config_arg=""

  if [[ -f "${config_file}" ]]; then
    config_arg="--rcfile=${config_file}"
  fi

  echo "${config_arg}"
}

# Check if a given path is a submodule directory path (from .gitmodules)
is_target_a_submodule_dir() {
  local dir_path="$1"

  if ! git rev-parse --is-inside-work-tree &> /dev/null; then
    return 1 # Not in a git repo
  fi

  local submodules_paths
  submodules_paths=$(git config --file .gitmodules --get-regexp path 2> /dev/null | awk '{print $2}' || echo "")

  if [[ -z "${submodules_paths}" ]]; then
    return 1 # No submodules defined
  fi

  # Normalize dir_path by removing trailing slash if any for comparison
  local normalized_dir_path="${dir_path%/}"

  while IFS= read -r submodule_path_from_config; do
    if [[ -n "${submodule_path_from_config}" ]]; then
      # Normalize submodule path from config as well
      local normalized_submodule_path_from_config="${submodule_path_from_config%/}"
      if [[ "${normalized_dir_path}" == "${normalized_submodule_path_from_config}" ]]; then
        return 0 # The path IS a submodule entry path
      fi
    fi
  done <<< "${submodules_paths}"

  return 1 # Not a submodule entry path
}

# Run shellcheck on a file and report issues
run_shellcheck() {
  local file="$1"
  local exclude="$2"
  local quiet="$3"

  local exclude_arg=""
  if [[ -n "${exclude}" ]]; then
    exclude_arg="--exclude=${exclude}"
  fi

  if [[ "${quiet}" -eq 0 ]]; then
    checking "${file}"
  fi

  # Get config
  local config_arg
  config_arg=$(get_shellcheck_config)

  # Create a temporary copy of the file
  local tmp_file
  tmp_file=$(mktemp)
  cat "${file}" > "${tmp_file}" || {
    err "failed to create temporary file"
    return 1
  }

  # Run shellcheck with project config
  local issues
  issues=$(shellcheck "${config_arg}" "${exclude_arg}" "${tmp_file}" 2>&1) || true

  # Clean up temp file
  rm -f "${tmp_file}"

  # Filter out the openBinaryFile error message if present
  issues=$(echo "${issues}" | grep -v "openBinaryFile: does not exist")

  if [[ -n "${issues}" ]]; then
    if [[ "${quiet}" -eq 0 ]]; then
      warn "issues detected in ${BOLD}${file}${RESET}:"
      echo "${issues}" | while IFS= read -r line; do
        echo -e "${ORANGE}${line}${RESET}"
      done
      echo
    fi
    return 1
  else
    if [[ "${quiet}" -eq 0 ]]; then
      no_issues "${file}"
    fi
    return 0
  fi
}

# Fix shellcheck issues using diff format
fix_shellcheck() {
  local file="$1"
  local exclude="$2"
  local quiet="$3"
  local verbose="$4"

  local exclude_arg=""
  if [[ -n "${exclude}" ]]; then
    exclude_arg="--exclude=${exclude}"
  fi

  if [[ "${quiet}" -eq 0 ]]; then
    fixing "${file}"
  fi

  # Get config
  local config_arg
  config_arg=$(get_shellcheck_config)

  # Create a temporary copy of the file
  local tmp_file
  tmp_file=$(mktemp)
  cat "${file}" > "${tmp_file}" || {
    err "failed to create temporary file"
    return 1
  }

  # Run shellcheck with project config
  local diff
  diff=$(shellcheck -f diff "${config_arg}" "${exclude_arg}" "${tmp_file}" 2> /dev/null)

  # Clean up temp file
  rm -f "${tmp_file}"

  if [[ -n "${diff}" && "${diff}" != "--- a/"* ]]; then
    #  The diff output doesn't look like a proper patch
    if [[ "${quiet}" -eq 0 ]]; then
      note "no auto-fixable issues in ${BOLD}${file}${RESET}"
    fi
    return 0
  fi

  if [[ -n "${diff}" ]]; then
    if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
      verb "applying fixes to ${BOLD}${file}${RESET}:"
      echo "${diff}" | while IFS= read -r line; do
        if [[ "${line}" == "+"* ]]; then
          echo -e "${GREEN}${line}${RESET}"
        elif [[ "${line}" == "-"* ]]; then
          echo -e "${RED}${line}${RESET}"
        else
          echo -e "${line}"
        fi
      done
    fi

    # Create a temporary directory for patching
    local tmp_dir
    tmp_dir=$(mktemp -d)

    # Create subdirectory structure
    mkdir -p "${tmp_dir}/a" "${tmp_dir}/b"

    # Copy the file to both directories
    cp "${file}" "${tmp_dir}/a/"
    cp "${file}" "${tmp_dir}/b/"

    # Modify the diff to use our temporary paths
    local file_name
    file_name=$(basename "${file}")
    local modified_diff
    modified_diff=$(echo "${diff}" | sed "s|--- a/.*|--- a/${file_name}|" | sed "s|+++ b/.*|+++ b/${file_name}|")

    # Apply the diff in the temporary directory
    if ! echo "${modified_diff}" | (cd "${tmp_dir}" && patch -p1 -s); then
      if [[ "${quiet}" -eq 0 ]]; then
        warn "failed to apply patch to ${BOLD}${file}${RESET}. leaving original untouched."
      fi
      rm -rf "${tmp_dir}"
    else
      # Copy the patched file back only if patch succeeded
      cp "${tmp_dir}/b/${file_name}" "${file}"

      if [[ "${quiet}" -eq 0 ]]; then
        fixed "${file}"
      fi
    fi

    # Clean up
    rm -rf "${tmp_dir}"
    return 0 # Assuming success if patch applied or no diff
  else
    if [[ "${quiet}" -eq 0 ]]; then
      nothing_to_fix "${file}"
    fi
    return 0
  fi
}

# Format script with shfmt
format_script() {
  local file="$1"
  local quiet="$2"
  local verbose="$3"

  if [[ "${quiet}" -eq 0 ]]; then
    formatting "${file}"
  fi

  # Convert to absolute path if not already
  local abs_file
  abs_file=$(readlink -f "${file}" 2> /dev/null || realpath "${file}" 2> /dev/null || echo "${file}")

  # Check if formatting is needed first, relying on .editorconfig
  local needs_formatting
  needs_formatting=$(shfmt -l "${abs_file}" 2> /dev/null)

  if [[ -n "${needs_formatting}" ]]; then
    if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
      local diff
      # Get diff, relying on .editorconfig
      diff=$(shfmt -d "${abs_file}" 2> /dev/null)
      verb "formatting changes for ${BOLD}${file}${RESET}:"

      echo "${diff}" | while IFS= read -r line; do
        if [[ "${line}" == "+"* ]]; then
          echo -e "${GREEN}${line}${RESET}"
        elif [[ "${line}" == "-"* ]]; then
          echo -e "${RED}${line}${RESET}"
        else
          echo -e "${line}"
        fi
      done
    fi

    # Apply formatting, relying on .editorconfig
    shfmt -w "${abs_file}" 2> /dev/null

    if [[ "${quiet}" -eq 0 ]]; then
      echo -e "${CYAN}➤ ${GREEN}formatted ${BOLD}${file}${RESET} ${PINK}⏩${RESET}"
    fi
  else
    if [[ "${quiet}" -eq 0 ]]; then
      well_formatted "${file}"
    fi
  fi
}

# Process a single file
process_file() {
  local file="$1"
  local check="$2"
  local fix="$3"
  local format="$4"
  local exclude="$5"
  local quiet="$6"
  local verbose="$7"
  local include_submodules="$8"

  # 1. If we are excluding submodules, and THIS path is a submodule entry itself (e.g. "tpm" gitlink from git ls-files), skip it.
  if [[ "${include_submodules}" -eq 0 ]]; then
    # Checks if 'file' matches a path in .gitmodules
    is_target_a_submodule_dir "${file}"
    local is_submodule_entry=$?
    if [[ "${is_submodule_entry}" -eq 0 ]]; then # If it is a submodule root/entry path
      if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
        note "skipping submodule entry: ${file}"
      fi
      return 0 # Successfully skipped
    fi

    # 2. If we are excluding submodules, and this path is a file *within* a submodule directory (e.g. "tpm/foo.sh"), skip it.
    # This check is only relevant if the path was not a submodule entry itself.
    # Checks if 'file' path starts with a submodule path
    is_in_submodule "${file}"
    local in_submodule_dir=$?
    if [[ "${in_submodule_dir}" -eq 0 ]]; then # If true (is in submodule path)
      if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
        note "skipping file located within submodule directory: ${file}"
      fi
      return 0
    fi
  fi

  # 3. If 'file' is a directory, skip it. process_file handles files only.
  #    (e.g. if a submodule entry "tpm" was passed and include_submodules=1, and "tpm" is a checked-out directory)
  if [[ -d "${file}" ]]; then
    if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
      note "skipping directory: ${file} (process_file handles files only)"
    fi
    return 0
  fi

  # 4. If 'file' is not a regular file (after a dir check), it's an issue or needs skipping.
  #    This covers non-existent files, special files, etc.
  if [[ ! -f "${file}" ]]; then
    if [[ "${quiet}" -eq 0 ]]; then
      if [[ ! -e "${file}" ]]; then # Truly doesn't exist
        err "file not found: ${file}"
      else                                # Exists but not a regular file (e.g. named pipe, socket, block/char device, broken symlink)
        if [[ "${verbose}" -eq 1 ]]; then # Only show note if verbose for non-regular files
          note "skipping non-regular file: ${file}"
        fi
      fi
    fi
    if [[ ! -e "${file}" ]]; then return 1; else return 0; fi # error if not exists, skip if other non-regular
  fi

  local file_basename
  file_basename=$(basename "${file}")
  local file_path_for_glob="${file}" # Use the full path for glob-like checks

  # Normalize path for bin/* check if it starts with ./
  if [[ "${file_path_for_glob}" == "./"* ]]; then
    file_path_for_glob="${file_path_for_glob#./}"
  fi

  # Define patterns for script identification
  local name_contains_patterns=("bashrc" "zshrc")
  local exact_name_patterns=("zshenv" "zlogin" "zlogout" "zprofile")
  local extension_patterns=(".sh" ".bash" ".zsh") # Filename must end with these

  local is_targeted_script=1 # 1 = false (skip), 0 = true (process)

  # Priority 1: Explicit name contains patterns
  for pattern in "${name_contains_patterns[@]}"; do
    if [[ "${file_basename}" == *"${pattern}"* ]]; then
      is_targeted_script=0
      break
    fi
  done

  # Priority 2: Specific exact filenames
  if [[ "${is_targeted_script}" -ne 0 ]]; then
    for pattern in "${exact_name_patterns[@]}"; do
      if [[ "${file_basename}" == "${pattern}" ]]; then
        is_targeted_script=0
        break
      fi
    done
  fi

  # Priority 3: Standard Shell Extensions
  if [[ "${is_targeted_script}" -ne 0 ]]; then
    for ext_pattern in "${extension_patterns[@]}"; do
      if [[ "${file_basename}" == *"${ext_pattern}" ]]; then # e.g., ends with .sh
        is_targeted_script=0
        break
      fi
    done
  fi

  # Priority 4: bin/* pattern (files directly in a "bin" directory at the start of the path)
  if [[ "${is_targeted_script}" -ne 0 ]]; then
    if [[ "${file_path_for_glob}" == bin/* && "${file_path_for_glob#bin/}" != */* ]]; then
      # For bin/ files, explicitly verify it's a shell script using file command
      is_shell_script "${file}"
      local bin_file_check=$?
      if [[ "${bin_file_check}" -eq 0 ]]; then
        is_targeted_script=0
      elif [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
        note "skipping non-shell script in bin/: ${file}"
      fi
    fi
  fi

  # Priority 5: Shebang check (if still not identified and is a file)
  if [[ "${is_targeted_script}" -ne 0 ]]; then
    if [[ -f "${file}" ]]; then # Only check shebang if it's a file
      is_shell_script "${file}" # Existing shebang check function
      local shebang_check_result=$?
      if [[ "${shebang_check_result}" -eq 0 ]]; then
        is_targeted_script=0
      fi
    fi
  fi

  # Final decision to skip or process
  if [[ "${is_targeted_script}" -ne 0 ]]; then
    if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
      # Only log skip message for actual files or symlinks that were considered
      if [[ -f "${file}" || -L "${file}" ]]; then
        note "skipping non-targeted file: ${file}"
      fi
    fi
    return 0 # Skip
  fi

  # If we reach here, it's a shell script. Proceed.
  local status=0

  # Format file if needed
  if [[ "${format}" -eq 1 ]]; then
    format_script "${file}" "${quiet}" "${verbose}"
  fi

  # Fix shellcheck issues
  if [[ "${fix}" -eq 1 ]]; then
    fix_shellcheck "${file}" "${exclude}" "${quiet}" "${verbose}"
  fi

  # Check for issues
  if [[ "${check}" -eq 1 ]]; then
    # Call run_shellcheck separately from the condition to avoid SC2310
    run_shellcheck "${file}" "${exclude}" "${quiet}"
    local shellcheck_result=$?
    if [[ "${shellcheck_result}" -ne 0 ]]; then
      status=1
    fi
  fi

  return "${status}"
}

# Print summary at the end
print_summary() {
  local file_count="$1"
  local exit_code="$2"
  local verbose="$3"
  local processed=("${@:4}")

  echo
  info "summary: ${BOLD}${file_count}${RESET}${MAGENTA} files processed${RESET}"

  if [[ "${verbose}" -eq 1 ]]; then
    verb "files checked:"
    for file in "${processed[@]}"; do
      echo -e "  ${BLUE}»${RESET} ${file}"
    done
  fi

  if [[ "${exit_code}" -eq 0 ]]; then
    echo -e "${GREEN}${BOLD}» all checks passed!${RESET}"
  else
    echo -e "${ORANGE}${BOLD}» found issues that need attention${RESET}"
    echo -e "${YELLOW}» run with --fix to auto-fix what's possible${RESET}"
  fi
}

# Main function
main() {
  check_deps

  local check=1 # Default to check mode
  local fix=0
  local format=0
  local recursive=0
  local quiet=0
  local verbose=0
  local exclude=""
  local include_submodules=0
  local exit_code=0
  local targets=()

  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -c | --check)
        check=1
        shift
        ;;
      -f | --fix)
        fix=1
        shift
        ;;
      -F | --format)
        format=1
        shift
        ;;
      -a | --all)
        check=1
        fix=1
        format=1
        shift
        ;;
      -r | --recursive)
        recursive=1
        shift
        ;;
      -q | --quiet)
        quiet=1
        shift
        ;;
      -v | --verbose)
        verbose=1
        shift
        ;;
      -s | --submodules)
        include_submodules=1
        shift
        ;;
      -e=* | --exclude=*)
        exclude="${1#*=}"
        shift
        ;;
      -e | --exclude)
        exclude="$2"
        shift 2
        ;;
      -h | --help)
        usage
        exit 0
        ;;
      -*)
        err "unknown option: $1"
        usage
        exit 1
        ;;
      *)
        targets+=("$1")
        shift
        ;;
    esac
  done

  # If no targets specified, use current directory
  if [[ ${#targets[@]} -eq 0 ]]; then
    targets=(".")
  fi

  # Debug: Show targets
  if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
    verb "processing targets:"
    for target in "${targets[@]}"; do
      echo -e "  - ${target}"
    done
  fi

  # Process all targets
  local file_count=0
  local processed=()

  # Don't fail fast, process all files
  set +e

  for target in "${targets[@]}"; do
    if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
      verb "processing target: ${target}"
    fi

    if [[ -d "${target}" ]]; then
      # Process directory
      local scripts
      if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
        verb "finding scripts in directory: ${target} (recursive=${recursive})"
      fi

      scripts=$(find_scripts "${target}" "${recursive}" "${include_submodules}")

      if [[ -z "${scripts}" ]]; then
        if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
          note "no scripts found in ${target}"
        fi
        continue
      fi

      if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
        verb "found scripts:"
        while IFS= read -r script; do
          echo "  - ${script}"
        done <<< "${scripts}"
      fi

      # Process each script found
      while IFS= read -r script; do
        if [[ -n "${script}" ]]; then
          if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
            verb "processing script: ${script}"
          fi

          # Call process_file separately from the condition to avoid SC2310
          process_file "${script}" "${check}" "${fix}" "${format}" "${exclude}" "${quiet}" "${verbose}" "${include_submodules}"
          local process_result=$?
          if [[ "${process_result}" -ne 0 ]]; then
            exit_code=1
            if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
              err "failed to process ${script}, continuing with next file"
            fi
          fi
          processed+=("${script}")
          ((file_count++))
        fi
      done < <(echo "${scripts}")
    elif [[ -f "${target}" ]]; then
      # Process single file
      if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
        verb "processing file: ${target}"
      fi

      # Call process_file separately from the condition to avoid SC2310
      process_file "${target}" "${check}" "${fix}" "${format}" "${exclude}" "${quiet}" "${verbose}" "${include_submodules}"
      local process_result=$?
      if [[ "${process_result}" -ne 0 ]]; then
        exit_code=1
        if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
          err "failed to process ${target}, continuing with next file"
        fi
      fi
      processed+=("${target}")
      ((file_count++))
    else
      err "target not found: ${target}"
      exit_code=1
    fi
  done

  # Restore error handling
  set -e

  # Summary
  if [[ "${quiet}" -eq 0 && ${#processed[@]} -gt 0 ]]; then
    print_summary "${file_count}" "${exit_code}" "${verbose}" "${processed[@]}"
  fi

  return "${exit_code}"
}

main "$@"
