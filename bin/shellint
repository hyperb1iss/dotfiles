#!/usr/bin/env bash
#
# shellint - Shell script linter and formatter
# A powerful tool for checking and fixing shell scripts in your dotfiles
#
# Handles:
# 1. Linting with shellcheck
# 2. Formatting with shfmt
# 3. Auto-fixing shellcheck issues
#

set -eo pipefail

# ANSI color codes for beautiful output üíÖ
RESET="\033[0m"
BOLD="\033[1m"
RED="\033[38;5;205m"     # Bright pink for errors
ORANGE="\033[38;5;209m"  # Soft neon orange for warnings
MAGENTA="\033[38;5;213m" # Bright magenta for info
PURPLE="\033[38;5;171m"  # Bright purple for debug
BLUE="\033[38;5;147m"    # Soft lavender for verbose
CYAN="\033[38;5;159m"    # Pastel cyan for success
PINK="\033[38;5;219m"    # Bright pink for highlights
YELLOW="\033[38;5;222m"  # Pastel amber for caution
GREEN="\033[38;5;157m"   # Pastel mint green for positive outcomes

# Global cache variables for git operations
declare -g GIT_REPO_ROOT=""
declare -g SUBMODULE_PATHS=""
declare -g IS_GIT_REPO=0
declare -g SHELLCHECK_CONFIG=""

# Color utility functions - short and sweet üíÖ
err() { echo -e "${RED}${BOLD}‚®Ø error:${RESET} $*"; }
warn() { echo -e "${ORANGE}‚è£ $*${RESET}"; }
info() { echo -e "${MAGENTA}‚èπ $*${RESET}"; }
dbg() { echo -e "${PURPLE}‚è© $*${RESET}"; }
verb() { echo -e "${BLUE}¬ª $*${RESET}"; }
ok() { echo -e "${CYAN}‚û§ $*${RESET}"; }
hi() { echo -e "${PINK}‚è∫ $*${RESET}"; }
note() { echo -e "${YELLOW}‚èß $*${RESET}"; }
b() { echo -e "${BOLD}$*${RESET}"; }

# Action messages with consistent formatting
checking() { info "checking ${BOLD}$*${RESET}..."; }
fixing() { hi "fixing ${BOLD}$*${RESET}..."; }
formatting() { info "formatting ${BOLD}$*${RESET}..."; }

# Result patterns - update for lowercase
no_issues() { ok "${GREEN}no issues in $*${RESET}"; }
fixed() { ok "${GREEN}fixed issues in $*${RESET}"; }
well_formatted() { ok "${GREEN}$* already properly formatted${RESET}"; }
no_fixable() { note "no auto-fixable issues in $*"; }
nothing_to_fix() { ok "${GREEN}no issues to fix in $*${RESET}"; }

# Initialize git cache - call once at startup
init_git_cache() {
  if git rev-parse --is-inside-work-tree &> /dev/null; then
    IS_GIT_REPO=1
    GIT_REPO_ROOT=$(git rev-parse --show-toplevel)
    SUBMODULE_PATHS=$(git config --file .gitmodules --get-regexp path 2> /dev/null | awk '{print $2}' || echo "")

    # Initialize shellcheck config
    local config_file="${GIT_REPO_ROOT}/.shellcheckrc"
    if [[ -f "${config_file}" ]]; then
      SHELLCHECK_CONFIG="--rcfile=${config_file}"
    fi
  else
    IS_GIT_REPO=0
  fi
}

# Dependency check
check_deps() {
  local missing=0
  for cmd in shellcheck shfmt patch; do
    if ! command -v "${cmd}" &> /dev/null; then
      err "${cmd} not found in system path"
      missing=1
    fi
  done

  if [[ ${missing} -eq 1 ]]; then
    echo
    note "missing dependencies:"
    echo -e "  ${CYAN}¬ª shellcheck:${RESET} https://github.com/koalaman/shellcheck#installing"
    echo -e "  ${CYAN}¬ª shfmt:${RESET} https://github.com/mvdan/sh#shfmt"
    echo -e "  ${CYAN}¬ª patch:${RESET} available in most package managers (apt, brew, etc.)"
    exit 1
  fi
}

# Print usage information
usage() {
  echo -e "${BOLD}${PURPLE}shellint${RESET} - shell script linter and formatter ${PINK}‚è©${RESET}\n"
  echo -e "${BOLD}usage:${RESET}"
  echo -e "  shellint [options] [file(s)/directory]\n"
  echo -e "${BOLD}options:${RESET}"
  echo -e "  ${CYAN}-c, --check${RESET}         check files without modifying them"
  echo -e "  ${CYAN}-f, --fix${RESET}           auto-fix shellcheck issues when possible"
  echo -e "  ${CYAN}-F, --format${RESET}        format files with shfmt"
  echo -e "  ${CYAN}-a, --all${RESET}           run all checks and fixes (format + fix)"
  echo -e "  ${CYAN}-r, --recursive${RESET}     recursively process directories"
  echo -e "  ${CYAN}-q, --quiet${RESET}         minimal output"
  echo -e "  ${CYAN}-v, --verbose${RESET}       verbose output"
  echo -e "  ${CYAN}-e, --exclude=LIST${RESET}  exclude shellcheck codes (comma-separated)"
  echo -e "  ${CYAN}-s, --submodules${RESET}    include git submodules (excluded by default)"
  echo -e "  ${CYAN}-h, --help${RESET}          display this help message\n"
  echo -e "${BOLD}examples:${RESET}"
  echo -e "  ${BLUE}¬ª${RESET} shellint --check sh/           ${MAGENTA}#${RESET} check all .sh files in sh/ directory"
  echo -e "  ${BLUE}¬ª${RESET} shellint --fix sh/android.sh   ${MAGENTA}#${RESET} fix shellcheck issues in android.sh"
  echo -e "  ${BLUE}¬ª${RESET} shellint --format --recursive  ${MAGENTA}#${RESET} format all shell files recursively"
  echo -e "  ${BLUE}¬ª${RESET} shellint --all sh/             ${MAGENTA}#${RESET} format and fix all scripts in sh/"
  echo -e "  ${BLUE}¬ª${RESET} shellint -e SC2086,SC2046 --fix ${MAGENTA}#${RESET} fix issues excluding certain codes\n"
}

# Fast check if path is in a git submodule using cached data
is_in_submodule() {
  local path="$1"

  [[ ${IS_GIT_REPO} -eq 0 ]] && return 1
  [[ -z "${SUBMODULE_PATHS}" ]] && return 1

  # Check if path is in any submodule using cached data
  while IFS= read -r submodule; do
    [[ -n "${submodule}" && "${path}" == "${submodule}"* ]] && return 0
  done <<< "${SUBMODULE_PATHS}"

  return 1
}

# Check if a given path is a submodule directory path using cached data
is_target_a_submodule_dir() {
  local dir_path="$1"

  [[ ${IS_GIT_REPO} -eq 0 ]] && return 1
  [[ -z "${SUBMODULE_PATHS}" ]] && return 1

  local normalized_dir_path="${dir_path%/}"

  while IFS= read -r submodule_path_from_config; do
    if [[ -n "${submodule_path_from_config}" ]]; then
      local normalized_submodule_path="${submodule_path_from_config%/}"
      [[ "${normalized_dir_path}" == "${normalized_submodule_path}" ]] && return 0
    fi
  done <<< "${SUBMODULE_PATHS}"

  return 1
}

# Find shell scripts in a directory
find_scripts() {
  local dir="$1"
  local recursive="$2"
  local include_submodules="$3"

  if [[ "${recursive}" -eq 1 ]]; then
    if [[ ${IS_GIT_REPO} -eq 1 ]]; then
      if [[ "${include_submodules}" -eq 1 ]]; then
        git ls-files --recurse-submodules -- "${dir}"
      else
        git ls-files -- "${dir}"
      fi
    else
      find "${dir}" -type f -not -path "*/\\.*" -print 2> /dev/null || true
    fi
  else
    find "${dir}" -maxdepth 1 -type f -not -path "*/\\.*" -print 2> /dev/null || true
  fi
}

# Simplified shell script detection
is_shell_script() {
  local file="$1"

  # Quick file type check using file command
  local file_type
  file_type=$(file -b "${file}" 2> /dev/null || echo "")
  [[ "${file_type}" =~ (shell script|sh script|bash script|zsh script|Bourne-Again shell|POSIX shell) ]]
}

# Simplified script identification
should_process_file() {
  local file="$1"
  local file_basename
  file_basename=$(basename "${file}")
  local file_path="${file#./}" # Remove leading ./

  # Quick pattern matching - order by likelihood
  case "${file_basename}" in
    *.sh | *.bash | *.zsh) return 0 ;;
    *bashrc* | *zshrc*) return 0 ;;
    zshenv | zlogin | zlogout | zprofile) return 0 ;;
    *) ;; # Continue to other checks
  esac

  # bin/* files need content check
  if [[ "${file_path}" == bin/* && "${file_path#bin/}" != */* ]]; then
    is_shell_script "${file}"
    return $?
  fi

  # Fallback to shebang check for other files
  is_shell_script "${file}"
}

# Run shellcheck on a file and report issues - optimized to avoid temp files
run_shellcheck() {
  local file="$1"
  local exclude="$2"
  local quiet="$3"

  local exclude_arg=""
  [[ -n "${exclude}" ]] && exclude_arg="--exclude=${exclude}"

  [[ "${quiet}" -eq 0 ]] && checking "${file}"

  # Run shellcheck directly on the file using cached config
  local issues
  issues=$(shellcheck "${SHELLCHECK_CONFIG}" "${exclude_arg}" "${file}" 2>&1) || true

  # Filter out the openBinaryFile error message if present
  issues=$(echo "${issues}" | grep -v "openBinaryFile: does not exist" || true)

  if [[ -n "${issues}" ]]; then
    if [[ "${quiet}" -eq 0 ]]; then
      warn "issues detected in ${BOLD}${file}${RESET}:"
      echo "${issues}" | while IFS= read -r line; do
        echo -e "${ORANGE}${line}${RESET}"
      done
      echo
    fi
    return 1
  else
    [[ "${quiet}" -eq 0 ]] && no_issues "${file}"
    return 0
  fi
}

# Fix shellcheck issues using diff format - optimized
fix_shellcheck() {
  local file="$1"
  local exclude="$2"
  local quiet="$3"
  local verbose="$4"

  local exclude_arg=""
  [[ -n "${exclude}" ]] && exclude_arg="--exclude=${exclude}"

  [[ "${quiet}" -eq 0 ]] && fixing "${file}"

  # Run shellcheck directly with cached config
  local diff
  diff=$(shellcheck -f diff "${SHELLCHECK_CONFIG}" "${exclude_arg}" "${file}" 2> /dev/null || true)

  if [[ -z "${diff}" || "${diff}" != "--- a/"* ]]; then
    [[ "${quiet}" -eq 0 ]] && note "no auto-fixable issues in ${BOLD}${file}${RESET}"
    return 0
  fi

  if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
    verb "applying fixes to ${BOLD}${file}${RESET}:"
    echo "${diff}" | while IFS= read -r line; do
      case "${line}" in
        "+"*) echo -e "${GREEN}${line}${RESET}" ;;
        "-"*) echo -e "${RED}${line}${RESET}" ;;
        *) echo -e "${line}" ;;
      esac
    done
  fi

  # Create a temporary directory for patching
  local tmp_dir
  tmp_dir=$(mktemp -d)
  local file_name
  file_name=$(basename "${file}")

  # Setup patch environment
  mkdir -p "${tmp_dir}/a" "${tmp_dir}/b"
  cp "${file}" "${tmp_dir}/a/" "${tmp_dir}/b/"

  # Modify and apply the diff
  local modified_diff
  modified_diff=$(echo "${diff}" | sed "s|--- a/.*|--- a/${file_name}|" | sed "s|+++ b/.*|+++ b/${file_name}|")

  if echo "${modified_diff}" | (cd "${tmp_dir}" && patch -p1 -s); then
    cp "${tmp_dir}/b/${file_name}" "${file}"
    [[ "${quiet}" -eq 0 ]] && fixed "${file}"
  else
    [[ "${quiet}" -eq 0 ]] && warn "failed to apply patch to ${BOLD}${file}${RESET}. leaving original untouched."
  fi

  rm -rf "${tmp_dir}"
  return 0
}

# Format script with shfmt
format_script() {
  local file="$1"
  local quiet="$2"
  local verbose="$3"

  [[ "${quiet}" -eq 0 ]] && formatting "${file}"

  # Convert to absolute path if not already
  local abs_file
  abs_file=$(readlink -f "${file}" 2> /dev/null || realpath "${file}" 2> /dev/null || echo "${file}")

  # Check if formatting is needed first, relying on .editorconfig
  local needs_formatting
  needs_formatting=$(shfmt -l "${abs_file}" 2> /dev/null || true)

  if [[ -n "${needs_formatting}" ]]; then
    if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
      local diff
      diff=$(shfmt -d "${abs_file}" 2> /dev/null || true)
      verb "formatting changes for ${BOLD}${file}${RESET}:"

      echo "${diff}" | while IFS= read -r line; do
        case "${line}" in
          "+"*) echo -e "${GREEN}${line}${RESET}" ;;
          "-"*) echo -e "${RED}${line}${RESET}" ;;
          *) echo -e "${line}" ;;
        esac
      done
    fi

    # Apply formatting, relying on .editorconfig
    shfmt -w "${abs_file}" 2> /dev/null

    [[ "${quiet}" -eq 0 ]] && echo -e "${CYAN}‚û§ ${GREEN}formatted ${BOLD}${file}${RESET} ${PINK}‚è©${RESET}"
  else
    [[ "${quiet}" -eq 0 ]] && well_formatted "${file}"
  fi
}

# Process a single file - simplified and optimized
process_file() {
  local file="$1"
  local check="$2"
  local fix="$3"
  local format="$4"
  local exclude="$5"
  local quiet="$6"
  local verbose="$7"
  local include_submodules="$8"

  # Skip submodule handling if we're not including them
  if [[ "${include_submodules}" -eq 0 ]]; then
    is_target_a_submodule_dir "${file}"
    local is_submodule_dir=$?
    is_in_submodule "${file}"
    local in_submodule=$?
    if [[ "${is_submodule_dir}" -eq 0 || "${in_submodule}" -eq 0 ]]; then
      [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]] && note "skipping submodule: ${file}"
      return 0
    fi
  fi

  # Handle directories
  if [[ -d "${file}" ]]; then
    [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]] && note "skipping directory: ${file}"
    return 0
  fi

  # Check if file exists and is regular
  if [[ ! -f "${file}" ]]; then
    if [[ ! -e "${file}" ]]; then
      [[ "${quiet}" -eq 0 ]] && err "file not found: ${file}"
      return 1
    else
      [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]] && note "skipping non-regular file: ${file}"
      return 0
    fi
  fi

  # Check if we should process this file
  should_process_file "${file}"
  local should_process=$?
  if [[ "${should_process}" -ne 0 ]]; then
    [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]] && note "skipping non-shell file: ${file}"
    return 0
  fi

  local status=0

  # Process the file in order: format, fix, check
  [[ "${format}" -eq 1 ]] && format_script "${file}" "${quiet}" "${verbose}"
  [[ "${fix}" -eq 1 ]] && fix_shellcheck "${file}" "${exclude}" "${quiet}" "${verbose}"

  if [[ "${check}" -eq 1 ]]; then
    run_shellcheck "${file}" "${exclude}" "${quiet}"
    local shellcheck_result=$?
    if [[ "${shellcheck_result}" -ne 0 ]]; then
      status=1
    fi
  fi

  return "${status}"
}

# Print summary at the end
print_summary() {
  local file_count="$1"
  local exit_code="$2"
  local verbose="$3"
  local processed=("${@:4}")

  echo
  info "summary: ${BOLD}${file_count}${RESET}${MAGENTA} files processed${RESET}"

  if [[ "${verbose}" -eq 1 ]]; then
    verb "files checked:"
    for file in "${processed[@]}"; do
      echo -e "  ${BLUE}¬ª${RESET} ${file}"
    done
  fi

  if [[ "${exit_code}" -eq 0 ]]; then
    echo -e "${GREEN}${BOLD}¬ª all checks passed!${RESET}"
  else
    echo -e "${ORANGE}${BOLD}¬ª found issues that need attention${RESET}"
    echo -e "${YELLOW}¬ª run with --fix to auto-fix what's possible${RESET}"
  fi
}

# Main function
main() {
  check_deps
  init_git_cache # Initialize git operations cache

  local check=1 # Default to check mode
  local fix=0
  local format=0
  local recursive=0
  local quiet=0
  local verbose=0
  local exclude=""
  local include_submodules=0
  local exit_code=0
  local targets=()

  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -c | --check)
        check=1
        shift
        ;;
      -f | --fix)
        fix=1
        shift
        ;;
      -F | --format)
        format=1
        shift
        ;;
      -a | --all)
        check=1
        fix=1
        format=1
        shift
        ;;
      -r | --recursive)
        recursive=1
        shift
        ;;
      -q | --quiet)
        quiet=1
        shift
        ;;
      -v | --verbose)
        verbose=1
        shift
        ;;
      -s | --submodules)
        include_submodules=1
        shift
        ;;
      -e=* | --exclude=*)
        exclude="${1#*=}"
        shift
        ;;
      -e | --exclude)
        exclude="$2"
        shift 2
        ;;
      -h | --help)
        usage
        exit 0
        ;;
      -*)
        err "unknown option: $1"
        usage
        exit 1
        ;;
      *)
        targets+=("$1")
        shift
        ;;
    esac
  done

  # If no targets specified, use current directory
  [[ ${#targets[@]} -eq 0 ]] && targets=(".")

  # Debug: Show targets
  if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
    verb "processing targets:"
    printf '  - %s\n' "${targets[@]}"
  fi

  # Process all targets
  local file_count=0
  local processed=()

  # Don't fail fast, process all files
  set +e

  for target in "${targets[@]}"; do
    [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]] && verb "processing target: ${target}"

    if [[ -d "${target}" ]]; then
      # Process directory
      local scripts
      [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]] && verb "finding scripts in directory: ${target} (recursive=${recursive})"

      scripts=$(find_scripts "${target}" "${recursive}" "${include_submodules}")

      if [[ -z "${scripts}" ]]; then
        [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]] && note "no scripts found in ${target}"
        continue
      fi

      if [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]]; then
        verb "found scripts:"
        while IFS= read -r script; do
          echo "  - ${script}"
        done <<< "${scripts}"
      fi

      # Process each script found
      while IFS= read -r script; do
        if [[ -n "${script}" ]]; then
          [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]] && verb "processing script: ${script}"

          process_file "${script}" "${check}" "${fix}" "${format}" "${exclude}" "${quiet}" "${verbose}" "${include_submodules}"
          local process_result=$?
          if [[ "${process_result}" -ne 0 ]]; then
            exit_code=1
            [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]] && err "failed to process ${script}, continuing with next file"
          fi
          processed+=("${script}")
          ((file_count++))
        fi
      done < <(echo "${scripts}")
    elif [[ -f "${target}" ]]; then
      # Process single file
      [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]] && verb "processing file: ${target}"

      process_file "${target}" "${check}" "${fix}" "${format}" "${exclude}" "${quiet}" "${verbose}" "${include_submodules}"
      local process_result=$?
      if [[ "${process_result}" -ne 0 ]]; then
        exit_code=1
        [[ "${verbose}" -eq 1 && "${quiet}" -eq 0 ]] && err "failed to process ${target}, continuing with next file"
      fi
      processed+=("${target}")
      ((file_count++))
    else
      err "target not found: ${target}"
      exit_code=1
    fi
  done

  # Restore error handling
  set -e

  # Summary
  if [[ "${quiet}" -eq 0 && ${#processed[@]} -gt 0 ]]; then
    print_summary "${file_count}" "${exit_code}" "${verbose}" "${processed[@]}"
  fi

  return "${exit_code}"
}

main "$@"
